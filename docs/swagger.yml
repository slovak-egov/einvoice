openapi: "3.0.0"
info:
  version: 1.0.0
  description: This is REST endpoints API documentation for E-invoice project.
  title: E-invoice API
servers:
  - description: Dev
    url: https://apiserver.dev.filipsladek.com
paths:
  /login:
    get:
      tags:
        - Auth
      summary: Authenticate user with slovensko.sk token
      security:
        - slovenskoSkOboTokenAuth: []
      responses:
        200:
          description: User is sucessfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logout:
    get:
      tags:
        - Auth
      summary: Logout user
      security:
        - sessionAuth: []
      responses:
        200:
          description: User is successfully logged out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get info about requested user
      parameters:
        - name: user_id
          in: path
          description: ID of requested user
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Users
      summary: Update user info
      parameters:
        - name: user_id
          in: path
          description: User ID of user to be updated
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        200:
          description: Updated user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{user_id}/substitutes:
    post:
      tags:
        - Users
      summary: Add substitute users
      description: Add rights for particular users to create invoices on your behalf
      parameters:
        - name: user_id
          in: path
          description: Add substitutes for user with this user ID
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubstituteIds'
      responses:
        200:
          description: List of substitute Ids that were successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubstituteIds'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Remove substitute users
      description: Revoke rights for particular users to create invoices on your behalf
      parameters:
        - name: user_id
          in: path
          description: Remove substitutes for user with this user ID
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubstituteIds'
      responses:
        200:
          description: List of substitute Ids that were successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubstituteIds'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Users
      summary: Get substitute users
      description: Get list of users that can create invoices on your behalf
      parameters:
        - name: user_id
          in: path
          description: Get substitutes for user with this user ID
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: List of substitute user Ids of requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubstituteIds'
  /users/{user_id}/organizations:
    get:
      tags:
        - Users
      summary: Get substituted organizations
      description: Get list of IČOs that requested user can create invoices on behalf of
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: List of substituted organizations for requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubstitutedOrganizations'
  /users/{user_id}/invoices:
    get:
      tags:
        - Users
      summary: Get all invoices requested user can view
      parameters:
        - name: user_id
          in: path
          description: Get invoices of user with this user ID
          required: true
          schema:
            type: integer
        - name: supplied
          in: query
          description: Request invoices supplied by IČO requested user has access to
          schema:
            type: boolean
        - name: received
          in: query
          description: Request invoices received by IČO requested user has acccess to
          schema:
            type: boolean
        - name: ico
          in: query
          description: Request invoices related to given IČO. If not provided, all will be considered
          schema:
            type: string
        - name: format
          in: query
          description: Filter invoices by format
          schema:
            type: array
            items:
              type: string
        - name: nextId
          in: query
          description: Id of next invoice to fetch
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit number of invoices returned
          schema:
            type: integer
        - name: test
          in: query
          description: If flag turned on, test invoices are fetched as well
          schema:
            type: boolean
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      responses:
        200:
          description: List of user invoices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'

  /invoices:
    get:
      tags:
        - Invoices
      summary: Get list of metadata of public invoices
      parameters:
        - name: format
          in: query
          description: Filter invoices by format
          schema:
            type: array
            items:
              type: string
        - name: nextId
          in: query
          description: Id of next invoice to fetch
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit number of invoices returned
          schema:
            type: integer
        - name: test
          in: query
          description: If flag turned on, test invoices are fetched as well
          schema:
            type: boolean
        - name: ico
          in: query
          description: Request invoices related to given IČO. If not provided, all will be considered
          schema:
            type: string
      responses:
        200:
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
    post:
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      tags:
        - Invoices
      summary: Create invoice
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
      responses:
        201:
          description: Invoice created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /invoices/{invoice_id}:
    get:
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      tags:
        - Invoices
      summary: Get invoice meta data
      parameters:
        - name: invoice_id
          in: path
          description: Invoice ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /invoices/{invoice_id}/detail:
    get:
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      tags:
        - Invoices
      summary: Get invoice content
      parameters:
        - name: invoice_id
          in: path
          description: Invoice ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Invoice'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /invoices/{invoice_id}/visualization:
    get:
      security:
        - sessionAuth: []
        - apiKeyAuth: []
      tags:
        - Invoices
      summary: Get invoice visualization
      parameters:
        - name: invoice_id
          in: path
          description: Invoice ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    slovenskoSkOboTokenAuth:
      description: OBO token received from slovensko.sk
      type: http
      scheme: bearer
      bearerFormat: JWT
    sessionAuth:
      description: Token received in response of login request
      type: http
      scheme: bearer
    apiKeyAuth:
      description: |
        JWT token satisfying:
        - encoded by RS256 algorithm
        - signed by your private key (paired with public key you set in your account)
        - `sub` claim set to your user Id as a string
        - `exp` claim set to current UTC timestamp + 30 minutes
        - `jti` claim set to random string unique during 60 minutes

        Example of `header` segment:

            {
              "alg": "RS256",
              "type": "JWT"
            }

        Example of `payload` segment:

            {
              "sub": "1",
              "exp": 1607590024,
              "jti": "4dee8618-abbe-4dc3-83ba-e984d1396f9f"
            }

        Notes:

        - `jti` value should follow regular expression `/\A[0-9a-z\-_]{32,256}\z/i`
        - same `jti` value cannot be reused in 60 minute timeframe
        - server considers `exp` valid if it fits in time interval `(current UTC; current UTC + 30 minutes)`
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 8498081
        slovenskoSkUri:
          type: string
          example: rc://sk/8314451298_tisici_janko
        email:
          type: string
          example: test@test.example.com
        name:
          type: string
        serviceAccountPublicKey:
          type: string
        createdAt:
          type: string
          format: date-time
    Invoices:
      type: object
      properties:
        nextId:
          type: integer
          nullable: true
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    Invoice:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sender:
          type: string
          example: SubjectA
        receiver:
          type: string
          example: SubjectB
        format:
          type: string
          enum:
            - ubl2.1
            - d16b
        price:
          type: integer
          example: 100
        supplierIco:
          type: string
          example: '11190993'
        customerIco:
          type: string
          example: '11190993'
        createdAt:
          type: string
          format: date-time
        issueDate:
          type: string
          format: date
        createdBy:
          type: integer
        isPublic:
          type: boolean
          description: True if invoice is visible to everyone
        test:
          type: boolean
          description: True if invoice is just for test purposes
    CreateInvoiceRequest:
      type: object
      properties:
        format:
          type: string
          enum:
            - ubl2.1
            - d16b
        test:
          type: boolean
          description: If true, service will create test-only invoice
        invoice:
          type: string
          format: binary
      required:
        - format
        - invoice
    PatchUserRequest:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        serviceAccountPublicKey:
          type: string
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            token:
              type: string
              format: uuid
    SubstituteIds:
      type: array
      items:
        type: integer
        description: Substitute ID
    SubstitutedOrganizations:
      type: array
      items:
        type: integer
        description: Organization IČO
    LogoutResponse:
      type: object
      properties:
        logout:
          type: string
          example: successful
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
